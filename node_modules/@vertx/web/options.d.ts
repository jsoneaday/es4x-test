/*
 * Copyright 2020 ES4X
 *
 * ES4X licenses this file to you under the Apache License, version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License.  You may obtain a copy of the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

import { PermittedOptions } from '@vertx/bridge-common/options';

/**
 * Options for configuring the event bus bridge.
 */
export class BridgeOptions {

  constructor();
  constructor(obj: BridgeOptions);
  inboundPermitted(): PermittedOptions;

  setInboundPermitted(inboundPermitted: PermittedOptions): BridgeOptions;

  getInboundPermitteds(): PermittedOptions;

  addInboundPermitted(inboundPermitteds: PermittedOptions): BridgeOptions;

  getMaxAddressLength(): number;

  setMaxAddressLength(maxAddressLength: number): BridgeOptions;

  getMaxHandlersPerSocket(): number;

  setMaxHandlersPerSocket(maxHandlersPerSocket: number): BridgeOptions;

  outboundPermitted(): PermittedOptions;

  setOutboundPermitted(outboundPermitted: PermittedOptions): BridgeOptions;

  getOutboundPermitteds(): PermittedOptions;

  addOutboundPermitted(outboundPermitteds: PermittedOptions): BridgeOptions;

  getPingTimeout(): number;

  setPingTimeout(pingTimeout: number): BridgeOptions;

  getReplyTimeout(): number;

  setReplyTimeout(replyTimeout: number): BridgeOptions;
}

export class Http2PushMapping {

  constructor();
  constructor(obj: Http2PushMapping);
  getExtensionTarget(): string;

  setExtensionTarget(extensionTarget: string): Http2PushMapping;

  getFilePath(): string;

  setFilePath(filePath: string): Http2PushMapping;

  isNoPush(): boolean;

  setNoPush(noPush: boolean): Http2PushMapping;
}

/**
 * Options for configuring a SockJS handler
 */
export class SockJSHandlerOptions {

  constructor();
  constructor(obj: SockJSHandlerOptions);
  getDisabledTransports(): string;

  addDisabledTransport(disabledTransports: string): SockJSHandlerOptions;

  getHeartbeatInterval(): number;

  setHeartbeatInterval(heartbeatInterval: number): SockJSHandlerOptions;

  isInsertJSESSIONID(): boolean;

  setInsertJSESSIONID(insertJSESSIONID: boolean): SockJSHandlerOptions;

  getLibraryURL(): string;

  setLibraryURL(libraryURL: string): SockJSHandlerOptions;

  getMaxBytesStreaming(): number;

  setMaxBytesStreaming(maxBytesStreaming: number): SockJSHandlerOptions;

  getSessionTimeout(): number;

  setSessionTimeout(sessionTimeout: number): SockJSHandlerOptions;
}
